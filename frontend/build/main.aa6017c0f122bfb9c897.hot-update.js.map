{"version":3,"file":"main.aa6017c0f122bfb9c897.hot-update.js","sources":["webpack:///./src/p1/ConfirmationPage.js"],"sourcesContent":["/** @jsx jsx */\nimport { css, jsx } from '@emotion/core'\nimport React from 'react'\nimport { navigate } from '@reach/router'\nimport { Trans } from '@lingui/macro'\nimport { I18n } from '@lingui/react'\nimport { ApolloConsumer, Mutation } from 'react-apollo'\nimport { H1, H2 } from '../components/header'\nimport { Container } from '../components/container'\nimport { Text } from '../components/text'\nimport { Button } from '../components/button'\nimport { Link } from '../components/link'\nimport { TrackPageViews } from '../TrackPageViews'\nimport { Steps } from '../components/stepper'\nimport { Layout } from '../components/layout'\nimport {\n  SUBMIT_REPORT_MUTATION,\n  getScamInfo,\n  getLostMoney,\n  getSuspectInfo,\n  getFiles,\n  getContactInfo,\n} from '../utils/queriesAndMutations'\nimport { BackButton } from '../components/backbutton'\n\nconst scamEventSummary = client => {\n  let {\n    howWereYouContacted,\n    otherMethodOfContact,\n    whenWereYouContacted,\n    scamDetails,\n  } = getScamInfo(client)\n\n  if (otherMethodOfContact) {\n    howWereYouContacted = howWereYouContacted.concat(otherMethodOfContact)\n  }\n  howWereYouContacted = howWereYouContacted\n    ? howWereYouContacted.filter(s => s !== 'other')\n    : ''\n  return (\n    <I18n>\n      {({ i18n }) => (\n        <React.Fragment>\n          <H2 fontSize={[3, null, 4]} marginBottom={[1, null, 1]}>\n            <Trans>What happened</Trans>{' '}\n            <Link\n              aria-label={i18n._('Edit scam event')}\n              type=\"button\"\n              color=\"black\"\n              to=\"/p1/scaminfo\"\n              textAlign=\"center\"\n            >\n              <Trans>Edit</Trans>\n            </Link>\n          \n          </H2>\n          {scamDetails ? (\n            <Text>\n              <strong>\n                <Trans>Description</Trans>:{' '}\n              </strong>\n              {scamDetails}\n            </Text>\n          ) : null}\n\n          {whenWereYouContacted ? (\n            <Text>\n              <strong>\n                <Trans>Date </Trans>:{' '}\n              </strong>\n              {whenWereYouContacted}\n            </Text>\n          ) : null}\n          {howWereYouContacted ? (\n            <Text>\n              <strong>\n                <Trans>Contacted by</Trans>:{' '}\n              </strong>\n              {howWereYouContacted.map(i => i18n._(i)).join(', ')}\n            </Text>\n          ) : null}\n        </React.Fragment>\n      )}\n    </I18n>\n  )\n}\n\nconst lostMoneySummary = client => {\n  let {\n    lostAmount,\n    lostCurrency,\n    lostOtherCurrency,\n    lostMethodsOfPayment,\n    lostOtherMethodOfPayment,\n  } = getLostMoney(client)\n\n  if (lostOtherMethodOfPayment) {\n    lostMethodsOfPayment = lostMethodsOfPayment.concat(lostOtherMethodOfPayment)\n  }\n  lostMethodsOfPayment = lostMethodsOfPayment.filter(s => s !== 'other')\n  return (\n    <I18n>\n      {({ i18n }) => (\n        <React.Fragment>\n          <H2\n            fontSize={[3, null, 4]}\n            marginTop={[3, null, 4]}\n            marginBottom={[1, null, 1]}\n          >\n            <Trans>Money lost</Trans>{' '}\n            <Link\n              aria-label={i18n._('Edit money lost')}\n              type=\"button\"\n              color=\"black\"\n              to=\"/p1/moneylost\"\n              textAlign=\"center\"\n            >\n              <Trans>Edit</Trans>\n            </Link>\n            \n          </H2>\n          {lostAmount ? (\n            <Text>\n              <strong>\n                <Trans>Amount</Trans>:{' '}\n              </strong>\n              {lostAmount}\n            </Text>\n          ) : null}\n          {lostCurrency || lostOtherCurrency ? (\n            <Text>\n              <strong>\n                <Trans>Currency</Trans>:{' '}\n              </strong>\n              {lostOtherCurrency ? lostOtherCurrency : i18n._(lostCurrency)}\n            </Text>\n          ) : null}\n          {lostMethodsOfPayment ? (\n            <Text>\n              <strong>\n                <Trans>Payment method</Trans>:{' '}\n              </strong>\n              {lostMethodsOfPayment.map(i => i18n._(i)).join(', ')}\n            </Text>\n          ) : null}\n        </React.Fragment>\n      )}\n    </I18n>\n  )\n}\n\nconst suspectInfoSummary = client => {\n  let {\n    suspectName,\n    suspectAddress,\n    suspectLanguage,\n    otherSuspectLanguage,\n    suspectPhone,\n    suspectEmail,\n    suspectWebsite,\n    suspectIP,\n  } = getSuspectInfo(client)\n\n  if (otherSuspectLanguage) {\n    suspectLanguage = suspectLanguage.concat(otherSuspectLanguage)\n  }\n  suspectLanguage = suspectLanguage.filter(s => s !== 'Other language')\n\n  return (\n    <I18n>\n      {({ i18n }) => (\n        <React.Fragment>\n          <H2\n            fontSize={[3, null, 4]}\n            marginTop={[3, null, 4]}\n            marginBottom={[1, null, 1]}\n          >\n            <Trans>About the suspect</Trans>{' '}\n            <Link\n              aria-label={i18n._('Edit scammer details')}\n              type=\"button\"\n              color=\"black\"\n              to=\"/p1/suspectinfo\"\n              textAlign=\"center\"\n            >\n              <Trans>Edit</Trans>\n            </Link>\n            \n          </H2>\n\n          {suspectName ? (\n            <Text>\n              <strong>\n                <Trans>Name</Trans>:{' '}\n              </strong>\n              {suspectName}\n            </Text>\n          ) : null}\n\n          {suspectEmail ? (\n            <Text>\n              <strong>\n                <Trans>Email address</Trans>:{' '}\n              </strong>\n              {suspectEmail}\n            </Text>\n          ) : null}\n\n          {suspectPhone ? (\n            <Text>\n              <strong>\n                <Trans>Phone number</Trans>:{' '}\n              </strong>\n              {suspectPhone}\n            </Text>\n          ) : null}\n\n          {suspectWebsite ? (\n            <Text>\n              <strong>\n                <Trans>Website</Trans>:{' '}\n              </strong>\n              {suspectWebsite}\n            </Text>\n          ) : null}\n\n          {suspectAddress ? (\n            <Text>\n              <strong>\n                {' '}\n                <Trans>Mailing address</Trans>:{' '}\n              </strong>\n              {suspectAddress}\n            </Text>\n          ) : null}\n          {suspectIP ? (\n            <Text>\n              <strong>\n                <Trans>IP address</Trans>:{' '}\n              </strong>\n              {suspectIP}\n            </Text>\n          ) : null}\n          {suspectLanguage ? (\n            <Text>\n              <strong>\n                <Trans>Language of correspondence</Trans>:{' '}\n              </strong>\n              {suspectLanguage.map(i => i18n._(i)).join(', ')}\n            </Text>\n          ) : null}\n        </React.Fragment>\n      )}\n    </I18n>\n  )\n}\n\nconst fileUploadSummary = client => {\n  const files = getFiles(client)\n  const fileList = files.join(', ')\n  return (\n    <React.Fragment>\n      <H2\n        fontSize={[3, null, 4]}\n        marginTop={[3, null, 4]}\n        marginBottom={[1, null, 1]}\n      >\n        <Trans>Files attached</Trans>{' '}\n        <I18n>\n          {({ i18n }) => {\n            return (\n              <Link\n                aria-label={i18n._('Edit files attached')}\n                type=\"button\"\n                color=\"black\"\n                to=\"/p1/uploadfiles\"\n                textAlign=\"center\"\n              >\n                <Trans>Edit</Trans>\n              </Link>\n            )\n          }}\n        </I18n>\n      </H2>\n      {files.length ? (\n        <Text>\n          <strong>\n            <Trans>File name</Trans>:{' '}\n          </strong>\n          {fileList}\n        </Text>\n      ) : null}\n    </React.Fragment>\n  )\n}\nconst contactInfoSummary = client => {\n  let {\n    userIsTheVictim,\n    contactInfoName,\n    contactInfoEmail,\n    contactInfoPhone,\n  } = getContactInfo(client)\n\n  return (\n    <I18n>\n      {({ i18n }) => (\n        <React.Fragment>\n          <H2\n            fontSize={[3, null, 4]}\n            marginTop={[3, null, 4]}\n            marginBottom={[1, null, 1]}\n          >\n            <Trans>Contact information</Trans>{' '}\n            <Link\n              aria-label={i18n._('Edit contact info')}\n              type=\"button\"\n              color=\"black\"\n              to=\"/p1/contactinfo\"\n              textAlign=\"center\"\n            >\n              <Trans>Edit</Trans>\n            </Link>\n            \n          </H2>\n\n          {contactInfoName ? (\n            <Text>\n              <strong>\n                <Trans>Name</Trans>:{' '}\n              </strong>\n              {contactInfoName}\n            </Text>\n          ) : null}\n\n          {contactInfoEmail ? (\n            <Text>\n              <strong>\n                <Trans>Email</Trans>:{' '}\n              </strong>\n              {contactInfoEmail}\n            </Text>\n          ) : null}\n          {contactInfoPhone ? (\n            <Text>\n              <strong>\n                <Trans>Phone number</Trans>:{' '}\n              </strong>\n              {contactInfoPhone}\n            </Text>\n          ) : null}\n          {userIsTheVictim ? (\n            <Text>\n              <strong>\n                <Trans>Did the scam happened to you</Trans>:{' '}\n              </strong>\n              {i18n._(userIsTheVictim)}\n            </Text>\n          ) : null}\n        </React.Fragment>\n      )}\n    </I18n>\n  )\n}\n\nconst randLetter = () => {\n  const letters = 'abcdefghijklmnopqrstuvwxyz'.split('')\n  return letters[Math.floor(Math.random() * letters.length)]\n}\nconst randDigit = () => Math.floor(Math.random() * 10)\n\nconst randomizeString = s =>\n  s\n    ? s\n        .replace(/[a-z]/g, () => randLetter())\n        .replace(/[A-Z]/g, () => randLetter().toUpperCase())\n        .replace(/[0-9]/g, () => randDigit())\n    : s\n\nconst submit = (client, submitReport) => {\n  let scamInfo = getScamInfo(client)\n  let lostMoney = getLostMoney(client)\n  let suspectInfo = getSuspectInfo(client)\n  let files = getFiles(client)\n  let contactInfo = getContactInfo(client)\n\n  let {\n    suspectName,\n    suspectAddress,\n    suspectLanguage,\n    otherSuspectLanguage,\n    suspectPhone,\n    suspectEmail,\n    suspectWebsite,\n    suspectIP,\n  } = suspectInfo\n  suspectName = randomizeString(suspectName)\n  suspectAddress = randomizeString(suspectAddress)\n  suspectPhone = randomizeString(suspectPhone)\n  suspectEmail = randomizeString(suspectEmail)\n  suspectWebsite = randomizeString(suspectWebsite)\n  suspectIP = randomizeString(suspectIP)\n\n  let {\n    userIsTheVictim,\n    contactInfoName,\n    contactInfoEmail,\n    contactInfoPhone,\n  } = contactInfo\n  contactInfoName = randomizeString(contactInfoName)\n  contactInfoEmail = randomizeString(contactInfoEmail)\n  contactInfoPhone = randomizeString(contactInfoPhone)\n\n  const data = {\n    source: 'p1',\n    scamInfo,\n    lostMoney,\n    suspectInfo: {\n      suspectName,\n      suspectAddress,\n      suspectLanguage,\n      otherSuspectLanguage,\n      suspectPhone,\n      suspectEmail,\n      suspectWebsite,\n      suspectIP,\n    },\n    files,\n    contactInfo: {\n      userIsTheVictim,\n      contactInfoName,\n      contactInfoEmail,\n      contactInfoPhone,\n    },\n  }\n  submitReport({ variables: data })\n  navigate('thankyou')\n}\n\nexport const ConfirmationPage = () => {\n  return (\n    <Layout>\n      <BackButton route=\"/p1/contactinfoquestion\">\n        <Trans>contact information</Trans>\n      </BackButton>\n      <Steps activeStep={6} totalSteps={6} />\n      <H1>\n        <Trans>Confirm report information</Trans>\n      </H1>\n      <TrackPageViews />\n      <ApolloConsumer>\n        {client => {\n          client.writeData({\n            data: { doneForms: true },\n          })\n\n          return (\n            <React.Fragment>\n              {scamEventSummary(client)}\n              {lostMoneySummary(client)}\n              {suspectInfoSummary(client)}\n              {fileUploadSummary(client)}\n              {contactInfoSummary(client)}\n            </React.Fragment>\n          )\n        }}\n      </ApolloConsumer>\n\n      <Container\n        mt=\"1rem\"\n        mb=\"4rem\"\n        display={['flex', 'block', 'flex']}\n        alignItems=\"center\"\n        css={css`\n          button,\n          div[name='buttonlink-container'] a {\n            padding: 0.7rem 1.5rem;\n            width: 100%;\n            text-align: center;\n          }\n\n          @media (max-width: 640px) {\n            div[name='buttonlink-container'] a {\n              padding: 0.7rem 0;\n            }\n          }\n        `}\n      >\n        <ApolloConsumer>\n          {client => (\n            <Mutation mutation={SUBMIT_REPORT_MUTATION}>\n              {submitReport => (\n                <Container name=\"buttonlink-container\" mt=\"1rem\">\n                  <Button\n                    type=\"submit\"\n                    onClick={() => submit(client, submitReport)}\n                  >\n                    <Trans>Submit report &nbsp; ❯</Trans>\n                  </Button>\n                </Container>\n              )}\n            </Mutation>\n          )}\n        </ApolloConsumer>\n        <Container\n          name=\"buttonlink-container\"\n          mt=\"1.9rem\"\n          ml={['3rem', '0', '3rem']}\n        >\n          <Link type=\"button\" color=\"black\" to=\"/p1\" textAlign=\"center\">\n            <Trans>Cancel report</Trans>\n          </Link>\n        </Container>\n      </Container>\n    </Layout>\n  )\n}\n"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAOA;AAAA;AASA;AAAA;AAQA;AAAA;AAEA;AAAA;AArCA;AA4CA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAGA;AACA;AACA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAOA;AAAA;AAQA;AAAA;AAQA;AAAA;AAEA;AAAA;AAxCA;AA+CA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAWA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAGA;AACA;AACA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAQA;AAAA;AASA;AAAA;AASA;AAAA;AASA;AAAA;AAUA;AAAA;AAQA;AAAA;AAQA;AAAA;AAEA;AAAA;AA9EA;AAqFA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAHA;AAKA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAGA;AAMA;AAAA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AAEA;AAAA;AAGA;AACA;AACA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAQA;AAAA;AASA;AAAA;AAQA;AAAA;AAQA;AAAA;AAhDA;AAyDA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAAA;AAAA;AAAA;AA8BA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AAJA;AAfA;AAsBA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAKA;AACA;AAAA;AAAA;AADA;AAIA;AASA;AAIA;AACA;AACA;AACA;AACA;AALA;AAqBA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AANA;AAFA;AAgBA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAMA;;;;A","sourceRoot":""}