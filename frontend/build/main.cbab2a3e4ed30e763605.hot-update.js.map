{"version":3,"file":"main.cbab2a3e4ed30e763605.hot-update.js","sources":["webpack:///./src/p2/forms/TimeFrameInfoForm.js"],"sourcesContent":["/** @jsx jsx */\nimport { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { css, jsx } from '@emotion/core'\nimport { ApolloConsumer } from 'react-apollo'\nimport { I18n } from '@lingui/react'\nimport { Trans } from '@lingui/macro'\nimport { Form, Field } from 'react-final-form'\nimport { H4 } from '../../components/header'\nimport { Container } from '../../components/container'\n\nimport { Button } from '../../components/button'\nimport { Link } from '../../components/link'\n\nimport { DateSelector } from '../../components/date-picker'\nimport { finalFormAdapter } from '../../utils/finalFormAdapter'\nimport { getTimeFrame } from '../../utils/queriesAndMutations'\n\nconst DateSelectorAdapter = finalFormAdapter(DateSelector)\n\nconst validate = () => {\n  return {}\n}\nclass TimeFrameInfoFormWrapped extends Component {\n  constructor(props) {\n    super(props)\n    const { startDate, endDate } = getTimeFrame(props.client)\n    this.startDate = new Date(startDate)\n    this.endDate = new Date(endDate)\n  }\n\n  handleChange = date => {\n    this.startDate = date\n  }\n  handleChangeDate = date => {\n    this.endDate = date\n  }\n\n  localOnSubmit = (client, data) => {\n    const { onSubmit } = this.props\n    if (this.startDate != null && this.startDate.length > 0) {\n      data.startDate = this.startDate.toISOString()\n    } else {\n      data.startDate = ''\n    }\n\n    if (this.endDate != null && this.endDate.length > 0) {\n      data.endDate = this.endDate.toISOString()\n    } else {\n      data.endDate = ''\n    }\n\n    onSubmit(client, data)\n  }\n\n  render() {\n    return (\n      <Form\n        onSubmit={data => this.localOnSubmit(this.props.client, data)}\n        validate={validate}\n        render={({ handleSubmit }) => (\n          <form onSubmit={handleSubmit}>\n            <label htmlFor=\"whenDidItStart\">\n              <P>\n                <Trans>Approximate start date</Trans>\n              </P>\n            </label>\n            <div>\n              <I18n>\n                {({ i18n }) => (\n                  <Field\n                    name=\"whenDidItStart\"\n                    id=\"whenDidItStart\"\n                    component={DateSelectorAdapter}\n                    locale={i18n._('en')}\n                    selected={this.startDate}\n                    onChange={this.handleChange}\n                    height=\"25px\"\n                    width=\"300px\"\n                  />\n                )}\n              </I18n>\n            </div>\n\n            <label htmlFor=\"whenWasLastInteraction\">\n              <P>\n                <Trans>Approximate end date</Trans>\n              </P>\n            </label>\n            <div>\n              <I18n>\n                {({ i18n }) => (\n                  <Field\n                    name=\"whenWasLastInteraction\"\n                    id=\"whenWasLastInteraction\"\n                    component={DateSelectorAdapter}\n                    locale={i18n._('en')}\n                    selected={this.endDate}\n                    onChange={this.handleChangeDate}\n                    height=\"25px\"\n                    width=\"300px\"\n                  />\n                )}\n              </I18n>\n            </div>\n            <Container\n              width=\"305px\"\n              marginTop={[1, null, 1]}\n              css={css`\n                display: flex;\n                flex-direction: column;\n                justify-content: space-between;\n              `}\n            >\n              <Button type=\"submit\">\n                <Trans>Continue</Trans>\n              </Button>\n            </Container>\n\n            <Container\n              width=\"300px\"\n              marginTop={[1, null, 1]}\n              css={css`\n                display: flex;\n                flex-direction: column;\n                justify-content: space-between;\n              `}\n            >\n              <Link type=\"button\" color=\"black\" to=\"/p2/\" textAlign=\"center\">\n                <Trans>Cancel report</Trans>\n              </Link>\n            </Container>\n          </form>\n        )}\n      />\n    )\n  }\n}\n\nTimeFrameInfoFormWrapped.propTypes = {\n  client: PropTypes.any.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n}\n\nexport const TimeFrameInfoForm = props => (\n  <ApolloConsumer>\n    {client => <TimeFrameInfoFormWrapped client={client} {...props} />}\n  </ApolloConsumer>\n)\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AAAA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAQA;AACA;AACA;AAVA;AAWA;AACA;AACA;AAbA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AAAA;AAAA;AACA;AAEA;AACA;AAJA;AAKA;AACA;;;AAyBA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AADA;AAeA;AAAA;AAEA;AAAA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AADA;AAeA;AACA;AACA;AAHA;AASA;AAAA;AACA;AAAA;AAKA;AACA;AACA;AAHA;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AArEA;AAHA;AA+EA;;;;AAjHA;AACA;AAmHA;AACA;AACA;AAFA;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AAFA;;;;A","sourceRoot":""}