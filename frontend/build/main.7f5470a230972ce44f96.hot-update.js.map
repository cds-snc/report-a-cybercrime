{"version":3,"file":"main.7f5470a230972ce44f96.hot-update.js","sources":["webpack:///./src/p1/forms/ScamInfoForm.js"],"sourcesContent":["/** @jsx jsx */\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { jsx } from '@emotion/core'\nimport styled from '@emotion/styled'\nimport { ApolloConsumer } from 'react-apollo'\nimport { I18n, i18nMark } from '@lingui/react'\nimport { Trans } from '@lingui/macro'\nimport { Form, Field } from 'react-final-form'\nimport { Checkbox } from '../../components/checkbox'\nimport { ButtonsContainer } from '../../components/buttons-container'\nimport { TextArea } from '../../components/text-area'\nimport { Text } from '../../components/text'\nimport { DateSelector } from '../../components/date-picker'\nimport { finalFormAdapter } from '../../utils/finalFormAdapter'\nimport { getScamInfo } from '../../utils/queriesAndMutations'\n\nconst CheckboxAdapter = finalFormAdapter(Checkbox)\nconst TextAreaAdapter = finalFormAdapter(TextArea)\nconst DateSelectorAdapter = finalFormAdapter(DateSelector)\n\nconst howContacted = [\n  i18nMark('Telephone'),\n  i18nMark('Email'),\n  i18nMark('Website'),\n  i18nMark('Other'),\n]\n\nconst CheckboxStyle = styled('label')`\n  margin-bottom: 8pt;\n`\n\nconst Fieldset = styled('fieldset')`\n  margin: 0;\n  padding: 0;\n  border: none;\n`\n\nconst validate = () => {\n  return {}\n}\nexport class ScamInfoForm extends Component {\n  constructor(props) {\n    super(props)\n    this.startDate = new Date()\n  }\n\n  handleChange = date => {\n    this.startDate = date\n  }\n\n  localOnSubmit = (client, data) => {\n    const { onSubmit } = this.props\n    // data.whenWereYouContacted = this.startDate.toISOString().slice(0, 10)\n    if (this.startDate != null) {\n      data.whenWereYouContacted = this.startDate.toISOString().slice(0, 10)\n    } else {\n      data.whenWereYouContacted = ''\n    }\n    onSubmit(client, data)\n  }\n\n  render() {\n    return (\n      <ApolloConsumer>\n        {client => (\n          <Form\n            initialValues={getScamInfo(client)}\n            onSubmit={data => this.localOnSubmit(client, data)}\n            validate={validate}\n            render={({\n              handleSubmit,\n              // reset,\n              // submitting,\n              // pristine,\n              values,\n              // invalid,\n            }) => (\n              <form onSubmit={handleSubmit}>\n                <label htmlFor=\"scamDetails\">\n                  <Text marginTop={[5, null, 6]}>\n                    <Trans>\n                      <strong>What happened?</strong>\n                    </Trans>\n                  </Text>\n                </label>\n                <div>\n                  <Field\n                    name=\"scamDetails\"\n                    id=\"scamDetails\"\n                    component={TextAreaAdapter}\n                    height=\"200px\"\n                    width=\"300px\"\n                  />\n                </div>\n\n                <label htmlFor=\"whenWereYouContacted\">\n                  <Text marginTop={[5, null, 6]}>\n                    <Trans>\n                      <strong>When did it start?</strong>\n                    </Trans>\n                  </Text>\n                </label>\n                <div>\n                  <I18n>\n                    {({ i18n }) => (\n                      <Field\n                        name=\"whenWereYouContacted\"\n                        id=\"whenWereYouContacted\"\n                        component={DateSelectorAdapter}\n                        locale={i18n._('en')}\n                        selected={this.startDate}\n                        onChange={this.handleChange}\n                        height=\"25px\"\n                        width=\"300px\"\n                      />\n                    )}\n                  </I18n>\n                </div>\n\n                <Fieldset>\n                  <legend>\n                    <Text marginTop={[5, null, 6]}>\n                      <Trans>\n                        <strong>How did it happen?</strong>\n                      </Trans>\n                    </Text>\n                  </legend>\n                  <div>\n                    <I18n>\n                      {({ i18n }) =>\n                        howContacted.map(key => {\n                          return (\n                            <CheckboxStyle key={key}>\n                              <Field\n                                name=\"howWereYouContacted\"\n                                component={CheckboxAdapter}\n                                type=\"checkbox\"\n                                value={key}\n                                label={i18n._(key)}\n                              />\n                            </CheckboxStyle>\n                          )\n                        })\n                      }\n                    </I18n>\n                  </div>\n                </Fieldset>\n\n                {values.howWereYouContacted &&\n                values.howWereYouContacted.indexOf('Other') > -1 ? (\n                  <React.Fragment>\n                    <label htmlFor=\"otherMethodOfContact\">\n                      <Text>\n                        <Trans>Other</Trans>\n                      </Text>\n                    </label>\n                    <div>\n                      <Field\n                        name=\"otherMethodOfContact\"\n                        id=\"otherMethodOfContact\"\n                        component={TextAreaAdapter}\n                        height=\"50px\"\n                        width=\"300px\"\n                      />\n                    </div>\n                  </React.Fragment>\n                ) : (\n                  ''\n                )}\n\n                <Text>\n                  {JSON.stringify(validate(values)) === JSON.stringify({}) ? (\n                    ''\n                  ) : (\n                    <Text>\n                      <Trans>Please fill out all fields</Trans>\n                    </Text>\n                  )}\n                </Text>\n                <ButtonsContainer\n                  buttonLink={false}\n                  cancel={true}\n                  cancelRoute=\"/p1/\"\n                  nextPage=\"Money lost\"\n                />\n              </form>\n            )}\n          />\n        )}\n      </ApolloConsumer>\n    )\n  }\n}\n\nScamInfoForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAMA;AACA;AACA;AARA;AASA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAjBA;AAFA;AAGA;AACA;AALA;AAAA;AAAA;AAqBA;AACA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAQA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AALA;AASA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAOA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AADA;AAiBA;AAAA;AACA;AAAA;AAAA;AAOA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AASA;AAbA;AAsBA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AACA;AALA;AAkBA;AAAA;AAKA;AACA;AACA;AACA;AAJA;AA9GA;AAJA;AADA;AA+HA;AAvJA;AACA;AADA;AAAA;AA0JA;AACA;AADA;;;;A","sourceRoot":""}