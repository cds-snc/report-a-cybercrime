{"version":3,"file":"main.85ab6968bf68cf9e29ba.hot-update.js","sources":["webpack:///./src/p2/ConfirmationSummary.js"],"sourcesContent":["/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport React from 'react'\nimport { Trans } from '@lingui/macro'\nimport { I18n } from '@lingui/react'\nimport { ApolloConsumer } from 'react-apollo'\nimport { H2 } from '../components/header'\nimport { Text, StyledSpan } from '../components/text'\nimport { Container } from '../components/container'\nimport { Link } from '../components/link'\nimport {\n  getTimeFrame,\n  getWhatHappened,\n  getScammerDetails,\n  getImpact,\n  getP2ContactInfo,\n} from '../utils/queriesAndMutations'\n\nconst SectionHeader = props => (\n  <H2\n    fontSize={[3, null, 4]}\n    marginTop={[2, null, 3]}\n    marginBottom={[1, null, 1]}\n    {...props}\n  />\n)\n\nconst EditButton = props => (\n  <Link type=\"button\" color=\"black\" textAlign=\"center\" {...props}>\n    <Trans>Edit</Trans>\n  </Link>\n)\n\nconst timeFrameSummary = client => {\n  let { startDate, endDate } = getTimeFrame(client)\n  startDate = startDate.slice(0, 10)\n  endDate = endDate.slice(0, 10)\n  return (\n    <React.Fragment>\n      <SectionHeader>\n        <Trans>Timeframe</Trans>{' '}\n        <I18n>\n          {({ i18n }) => (\n            <EditButton\n              aria-label={i18n._('Edit timeframe')}\n              to=\"/p2/timeframe\"\n            />\n          )}\n        </I18n>\n      </SectionHeader>\n      {startDate ? (\n        <Text>\n          <Trans>\n            {startDate} to {endDate}\n          </Trans>\n        </Text>\n      ) : (\n        <Text>\n          <Trans>\n            If you can, give us an idea of when the scam took place so that\n            police are able to investigate.\n          </Trans>\n        </Text>\n      )}\n    </React.Fragment>\n  )\n}\n\nconst whatHappenedSummary = client => {\n  let { whatHappened } = getWhatHappened(client)\n\n  return (\n    <React.Fragment>\n      <SectionHeader>\n        <Trans>Scam</Trans>{' '}\n        <I18n>\n          {({ i18n }) => (\n            <EditButton\n              aria-label={i18n._('Edit what happened')}\n              to=\"/p2/whathappened\"\n            />\n          )}\n        </I18n>\n      </SectionHeader>\n      {whatHappened ? (\n        <Text>{whatHappened}</Text>\n      ) : (\n        <Text>\n          <Trans>\n            Tell us what happened so we can stop it from happening in the future.\n          </Trans>\n        </Text>\n      )}\n    </React.Fragment>\n  )\n}\n\nconst scammerSummary = client => {\n  const { scammerDetails, files, fileDescriptions } = getScammerDetails(client)\n  return (\n    <React.Fragment>\n      <SectionHeader>\n        <Trans>Scammer</Trans>{' '}\n        <I18n>\n          {({ i18n }) => (\n            <EditButton\n              aria-label={i18n._('Edit scammer information')}\n              to=\"/p2/scammerdetails\"\n            />\n          )}\n        </I18n>\n      </SectionHeader>\n      {scammerDetails !== '' ||\n      files.length > 0 ||\n      fileDescriptions.length > 0 ? (\n        <React.Fragment>\n          <Text>{scammerDetails}</Text>\n          {files\n            ? files.map((file, index) => (\n                <Container key={index}>\n                  <StyledSpan fontSize={[2, null, 3]} fontWeight=\"bold\">\n                    {file}:\n                  </StyledSpan>{' '}\n                  <StyledSpan fontSize={[2, null, 3]}>\n                    {fileDescriptions[index]}\n                  </StyledSpan>\n                </Container>\n              ))\n            : null}\n        </React.Fragment>\n      ) : (\n        <Text>\n          <Trans>\n            If you can, share any details you know so that police can try to\n            identify suspects.\n          </Trans>\n        </Text>\n      )}\n    </React.Fragment>\n  )\n}\n\nconst impactSummary = client => {\n  let { howWereYouAffected, otherImpact, damage } = getImpact(client)\n  if (howWereYouAffected.indexOf('Other impact') > -1) {\n    howWereYouAffected = howWereYouAffected.filter(\n      impact => impact != 'Other impact',\n    )\n    howWereYouAffected.push(otherImpact)\n  }\n  return (\n    <React.Fragment>\n      <SectionHeader>\n        <Trans>Impact</Trans>{' '}\n        <I18n>\n          {({ i18n }) => (\n            <EditButton aria-label={i18n._('Edit impact')} to=\"/p2/impact\" />\n          )}\n        </I18n>\n      </SectionHeader>\n      {howWereYouAffected.length > 0 || damage != '' ? (\n        <React.Fragment>\n          <Text>{howWereYouAffected.join(', ')}</Text>\n          <Text>{damage}</Text>\n        </React.Fragment>\n      ) : (\n        <Text>\n          <Trans>\n            If you can, tell us how the scam impacted you so that we can better\n            support other people who are affected.\n          </Trans>\n        </Text>\n      )}\n    </React.Fragment>\n  )\n}\n\nconst contactSummary = client => {\n  const { fullName, email, phone, postalCode } = getP2ContactInfo(client)\n  return (\n    <React.Fragment>\n      <SectionHeader>\n        <Trans>Contact</Trans>{' '}\n        <I18n>\n          {({ i18n }) => (\n            <EditButton\n              aria-label={i18n._('Edit contact information')}\n              to=\"/p2/contactinfo\"\n            />\n          )}\n        </I18n>\n      </SectionHeader>\n      {(fullName + email + phone + postalCode).length > 0 ? (\n        <React.Fragment>\n          <Text>{fullName}</Text>\n          <Text>{email}</Text>\n          <Text>{phone}</Text>\n          <Text>{postalCode}</Text>\n        </React.Fragment>\n      ) : (\n        <Text>\n          <Trans>\n            Please provide your contact details. This gives us a way to reach\n            you.\n          </Trans>\n        </Text>\n      )}\n    </React.Fragment>\n  )\n}\n\nexport const ConfirmationSummary = () => (\n  <ApolloConsumer>\n    {client => {\n      client.writeData({\n        data: { doneForms: true },\n      })\n      return (\n        <React.Fragment>\n          {timeFrameSummary(client)}\n          {whatHappenedSummary(client)}\n          {scammerSummary(client)}\n          {impactSummary(client)}\n          {contactSummary(client)}\n        </React.Fragment>\n      )\n    }}\n  </ApolloConsumer>\n)\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAEA;AACA;AACA;AAHA;AADA;AACA;AAQA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAFA;AACA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAEA;AAAA;AAEA;AACA;AAFA;AADA;AAUA;AAAA;AACA;AAAA;AADA;AAAA;AAMA;AAAA;AAQA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAGA;AAAA;AAEA;AAAA;AAEA;AACA;AAFA;AADA;AAYA;AAAA;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAAA;AAEA;AAAA;AAEA;AACA;AAFA;AADA;AAcA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AALA;AAcA;AAAA;AAQA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AADA;AAYA;AAAA;AAQA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAAA;AAEA;AAAA;AAEA;AACA;AAFA;AADA;AAiBA;AAAA;AAQA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AADA;AAGA;AASA;AAfA;;;;A","sourceRoot":""}