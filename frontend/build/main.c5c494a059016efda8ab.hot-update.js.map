{"version":3,"file":"main.c5c494a059016efda8ab.hot-update.js","sources":["webpack:///./src/Chart.js","webpack:///./src/Home.js","webpack:///./src/Page2.js","webpack:///./src/Stats.js","webpack:///./src/Summary.js","webpack:///./src/server.js","webpack:///./src/utils/queriesAndMutations.js"],"sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { I18n } from '@lingui/react'\nimport { t, Trans } from '@lingui/macro'\nimport { H3 } from './components/header'\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  ResponsiveContainer,\n} from 'recharts'\nimport theme from './theme'\n\nexport class Chart extends PureComponent {\n  render() {\n    return (\n      <I18n>\n        {({ i18n }) => (\n          <React.Fragment>\n            <H3 mt={6} textAlign=\"center\">\n              <Trans>Reports similar to yours</Trans>\n            </H3>\n            <div style={{ width: '100%', height: 300 }}>\n              <ResponsiveContainer\n                width={this.props.width}\n                height={this.props.height}\n              >\n                <AreaChart\n                  data={this.props.data}\n                  margin={{\n                    top: 0,\n                    right: 0,\n                    left: -20,\n                    bottom: 0,\n                  }}\n                >\n                  <CartesianGrid strokeDasharray=\"2 2\" />\n                  <XAxis fontFamily={theme.fontSans} dataKey=\"date\" />\n                  <YAxis\n                    dataKey=\"total\"\n                    fontFamily={theme.fontSans}\n                    label={{\n                      value: i18n._(t`Reports per day`),\n                      fontSize: '17px',\n                      angle: -90,\n                      fontFamily: theme.fontSans,\n                    }}\n                  />\n                  <Area\n                    type=\"monotone\"\n                    dataKey=\"total\"\n                    stroke=\"#000\"\n                    fill=\"#999\"\n                  />\n                </AreaChart>\n              </ResponsiveContainer>\n            </div>\n          </React.Fragment>\n        )}\n      </I18n>\n    )\n  }\n}\n\nChart.propTypes = {\n  height: PropTypes.number,\n  width: PropTypes.number,\n  data: PropTypes.array,\n}\n","import React from 'react'\nimport { Router } from '@reach/router'\nimport { Trans } from '@lingui/macro'\nimport styled from '@emotion/styled'\nimport { PhaseBanner } from './components/phase-banner'\nimport { Summary } from './Summary'\nimport { PageNotFound } from './PageNotFound'\nimport { Page1 } from './Page1'\nimport { Page2 } from './Page2'\nimport { FileUploadPage } from './FileUpload'\n\nconst Root = styled('div')`\n  margin: 20pt;\n`\n\nconst Screen = styled('div')`\n  margin-top: 30pt;\n`\n\nexport const Home = () => (\n  <Root>\n    <PhaseBanner phase={<Trans>ALPHA</Trans>} phaseColor=\"purple\">\n      <Trans>\n        This site will be changing as we test ideas and learn from people like\n        you.\n      </Trans>\n    </PhaseBanner>\n    <Screen>\n      <Router>\n        <PageNotFound default />\n        <Page1 path=\"/\" />\n        <Page2 path=\"/flag\" />\n        <Summary path=\"/summary/:identifier\" />\n        <FileUploadPage path=\"/fileuploader\" />\n      </Router>\n    </Screen>\n  </Root>\n)\n","/** @jsx jsx */\nimport { navigate } from '@reach/router'\nimport { Trans } from '@lingui/macro'\nimport { Form, Field } from 'react-final-form'\nimport { H1 } from './components/header'\nimport { ApolloConsumer, Mutation } from 'react-apollo'\nimport { FLAG_IDENTIFIER_MUTATION } from './utils/queriesAndMutations'\nimport { TrackPageViews } from './TrackPageViews'\nimport { i18nMark } from '@lingui/react'\nimport { Container } from './components/container'\nimport { jsx, css } from '@emotion/core'\nimport { TextArea } from './components/text-area'\nimport { Button } from './components/button'\nimport { ButtonLink } from './components/link'\nimport { Label } from './components/label'\nimport { P, Lead } from './components/paragraph'\n\nconst submitAndNavigate = (flagIdentifier, data) => {\n  flagIdentifier({ variables: data })\n  navigate(`/summary/${encodeURIComponent(data.identifier)}`)\n}\n\nconst validate = values => {\n  let errors = {}\n  if (!values.identifier) {\n    errors.identifier = i18nMark(\n      'Please enter information about the scam in the box.',\n    )\n  }\n  return errors\n}\nconst MyForm = () => (\n  <ApolloConsumer>\n    {() => (\n      <Mutation mutation={FLAG_IDENTIFIER_MUTATION}>\n        {flagIdentifier => (\n          <Form\n            onSubmit={data => submitAndNavigate(flagIdentifier, data)}\n            validate={validate}\n            render={({ handleSubmit }) => (\n              <form onSubmit={handleSubmit}>\n                <Label htmlFor=\"identifier\">\n                  {' '}\n                  <Lead mt={5} />\n                  <P fontSize={[2, null, 3]} lineHeight={[2, null, 3]} mb={2}>\n                    {' '}\n                  </P>\n                  <P fontSize={[2, null, 3]} lineHeight={[2, null, 3]} mb={2}>\n                    {' '}\n                    <Trans>\n                      <b>\n                        Enter the email address, phone number, or website of the\n                        scam:\n                      </b>\n                    </Trans>\n                  </P>\n                </Label>\n                <Container>\n                  <Field id=\"identifier\" name=\"identifier\">\n                    {({ input, meta }) => (\n                      <Container width={['100%', null, '600px']}>\n                        <TextArea\n                          width={1}\n                          border=\"1px solid black\"\n                          height={['35px', null, '45px']}\n                          {...input}\n                          placeholder=\"\"\n                        />\n                        <Container mt={3} display=\"inline-block\">\n                          <P fontSize={[2, null, 3]} color=\"red\">\n                            {meta.error && meta.touched && (\n                              <Trans id={meta.error} />\n                            )}\n                          </P>\n                        </Container>\n                      </Container>\n                    )}\n                  </Field>\n                </Container>\n                <Container\n                  display=\"flex\"\n                  flexDirection=\"row\"\n                  width={['100%', null, '600px']}\n                >\n                  <Container width={1 / 2}>\n                    <ButtonLink to=\"/\">\n                      &lt; <Trans>Back</Trans>\n                    </ButtonLink>\n                  </Container>\n                  <Container width={1 / 2}>\n                    <Button\n                      type=\"Submit\"\n                      css={css`\n                        float: right;\n                      `}\n                    >\n                      <Trans>Submit scam</Trans> &gt;\n                    </Button>\n                  </Container>\n                </Container>\n              </form>\n            )}\n          />\n        )}\n      </Mutation>\n    )}\n  </ApolloConsumer>\n)\n\nexport const Page2 = () => (\n  <Container width={['100%', null, '600px']} m=\"auto\">\n    <H1 fontSize={[5, null, 6]}>\n      <Trans>Report a scam</Trans>\n    </H1>\n    <TrackPageViews />\n    <MyForm />\n  </Container>\n)\n","import React from 'react'\nimport { Query } from 'react-apollo'\nimport PropTypes from 'prop-types'\nimport { P } from './components/paragraph'\nimport { FLAGGINGS_WITHIN } from './utils/queriesAndMutations'\n\nexport const Stats = ({\n  identifier = '555-555-5555',\n  startDate = '2019-04-01',\n  endDate = '2019-04-20',\n  children,\n}) => (\n  <Query\n    query={FLAGGINGS_WITHIN}\n    variables={{\n      identifier,\n      startDate,\n      endDate,\n    }}\n    errorPolicy=\"all\"\n  >\n    {({ loading, error, data }) => {\n      if (loading) return ''\n      if (error)\n        return (\n          <P color=\"crimson\" fontWeight=\"bolder\">\n            Error connecting to database:\n            <br />\n            {error.message}\n          </P>\n        )\n\n      let { stats } = data\n      {\n        return children(stats.flaggingsWithin)\n      }\n    }}\n  </Query>\n)\n\nStats.propTypes = {\n  identifier: PropTypes.string.isRequired,\n  startDate: PropTypes.string.isRequired,\n  endDate: PropTypes.string.isRequired,\n  children: PropTypes.func.isRequired,\n}\n","/** @jsx jsx */\n// eslint-disable-next-line no-unused-vars\nimport React from 'react'\nimport { Stats } from './Stats'\nimport { Chart } from './Chart'\nimport { TrackPageViews } from './TrackPageViews'\nimport PropTypes from 'prop-types'\nimport { jsx } from '@emotion/core'\nimport { Container } from './components/container'\nimport { Trans } from '@lingui/macro'\nimport { H1, H2 } from './components/header'\nimport { P } from './components/paragraph'\nimport { ButtonLink } from './components/link'\n\nexport const Summary = ({ identifier }) => (\n  <Container mx={'auto'} width={[1, 1, 1]}>\n    <H1 fontSize={[5, null, 6]}>\n      <Trans>Thank you for reporting.</Trans>\n    </H1>\n\n    <Stats\n      identifier={identifier}\n      startDate=\"2019-04-01\"\n      endDate={new Date().toISOString().split('T')[0]}\n    >\n      {({ summary }) => (\n        <>\n          <H2 fontSize={[3, null, 4]}>\n            <Trans>Youâ€™re the 12th person to help us with this scam.</Trans>\n          </H2>\n          <Chart data={summary} />\n        </>\n      )}\n    </Stats>\n\n    <P>\n      <Trans>\n        Everything we learn from people like you can help stop scams like this\n        from happening.\n      </Trans>\n    </P>\n    <TrackPageViews />\n    <ButtonLink mb={[3, null, 5]} to=\"/\">\n      <Trans>Report another scam</Trans>\n    </ButtonLink>\n  </Container>\n)\nSummary.propTypes = { identifier: PropTypes.string }\n","import React from 'react'\nimport { HttpLink } from 'apollo-link-http'\nimport { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport fetch from 'isomorphic-unfetch'\nimport { ApolloProvider, renderToStringWithData } from 'react-apollo'\nimport { LanguageSwitching } from './LanguageSwitching'\nimport { HelmetProvider } from 'react-helmet-async'\nimport express from 'express'\nimport requestLanguage from 'express-request-language'\nimport { ServerLocation } from '@reach/router'\nimport App from './App'\n\nlet assets, publicDir\n\nconst {\n  RAZZLE_SERVER_SIDE_API_URI, // Razzle strips env vars that are not prefixed\n} = process.env\n\nif (process.env.NODE_ENV === 'test') {\n  assets = { client: { css: {} } }\n  publicDir = 'public'\n} else {\n  assets = require(process.env.RAZZLE_ASSETS_MANIFEST)\n  publicDir = process.env.RAZZLE_PUBLIC_DIR\n}\n\nconst server = express()\nserver\n  .disable('x-powered-by')\n  .use(express.static(publicDir))\n  .use(\n    requestLanguage({\n      languages: ['en', 'fr'],\n    }),\n  )\n  .get('/assets', (req, res) => {\n    res.status(200).send(JSON.stringify(assets))\n  })\n  .get('/monitoring/alive', (req, res) => {\n    res.status(200).send('yes')\n  })\n  .get('/monitoring/ready', (req, res) => {\n    res.status(200).send('yes')\n  })\n  .get('/*', async (req, res) => {\n    const cache = new InMemoryCache()\n\n    // Add defaults for form fields\n    cache.writeData({\n      data: {\n        language: req.language,\n      },\n    })\n\n    const client = new ApolloClient({\n      ssrMode: true,\n      link: new HttpLink({\n        uri: RAZZLE_SERVER_SIDE_API_URI,\n        fetch,\n      }),\n      cache,\n    })\n\n    const helmetContext = {}\n\n    let markup\n    try {\n      markup = await renderToStringWithData(\n        <HelmetProvider context={helmetContext}>\n          <ApolloProvider client={client}>\n            <ServerLocation url={req.url}>\n              <LanguageSwitching>\n                <App />\n              </LanguageSwitching>\n            </ServerLocation>\n          </ApolloProvider>\n        </HelmetProvider>,\n      )\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error('Data fetching during SSR Failed:', e)\n    }\n\n    const { helmet } = helmetContext\n\n    res\n      .set({ 'Content-Language': req.language })\n      .status(200)\n      .send(\n        `<!DOCTYPE html>\n      <html ${helmet.htmlAttributes.toString()}>\n        <head>\n          ${helmet.title.toString()} ${helmet.meta.toString()}\n          ${helmet.link.toString()}\n          ${\n            assets.client.css\n              ? `<link rel=\"stylesheet\" href=\"${assets.client.css}\">`\n              : ''\n          }\n          ${\n            process.env.NODE_ENV === 'production'\n              ? `<script src=\"${assets.client.js}\" defer></script>`\n              : `<script src=\"${assets.client.js}\" defer crossorigin></script>`\n          }\n        </head>\n        <body ${helmet.bodyAttributes.toString()}>\n          <div id=\"root\">${markup}</div>\n        </body>\n      </html>`,\n      )\n  })\n\nexport default server\n","import gql from 'graphql-tag'\n\nexport const GET_LANGUAGE_QUERY = gql`\n  query GetLanguage {\n    language @client\n  }\n`\nexport const FLAGGINGS_WITHIN = gql`\n  query($identifier: String!, $startDate: DateTime!, $endDate: DateTime!) {\n    stats {\n      flaggingsWithin(\n        identifier: $identifier\n        startDate: $startDate\n        endDate: $endDate\n      ) {\n        identifier\n        summary {\n          date\n          total\n        }\n      }\n    }\n  }\n`\n\nexport const IDENTIFIER_FLAGGINGS_WITHIN = gql`\n  query($identifier: String!) {\n    stats {\n      identifierFlaggingsWithin(identifier: $identifier) {\n        identifier\n        summary {\n          date\n          total\n        }\n      }\n    }\n  }\n`\nexport const GET_STATS_QUERY = gql`\n  query GetStats {\n    stats {\n      reportCount\n    }\n  }\n`\n\nexport const FLAG_IDENTIFIER_MUTATION = gql`\n  mutation flagIdentifier($identifier: String) {\n    flagIdentifier(identifier: $identifier) {\n      identifier\n    }\n  }\n`\n\nexport const SAVE_REPORT_MUTATION = gql`\n  mutation saveReport(\n    $whatHappened: String\n    $whatWasInvolved: String\n    $whatWasInvolvedOther: String\n    $howWereYouAffected: String\n  ) {\n    saveReport(\n      whatHappened: $whatHappened\n      whatWasInvolved: $whatWasInvolved\n      whatWasInvolvedOther: $whatWasInvolvedOther\n      howWereYouAffected: $howWereYouAffected\n    ) {\n      whatHappened\n      whatWasInvolved\n      whatWasInvolvedOther\n      howWereYouAffected\n    }\n  }\n`\n"],"mappings":"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","sourceRoot":""}