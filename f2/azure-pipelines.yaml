#ncfrs pipeline

# Trigger pipeline on changes to master in repos
trigger:
  branches:
    include:
      - master
      - release-rcmp-staging
      - release-rcmp-prod
  paths:
    include:
      - f2
    exclude:
      - f2/manifests/*

# Use an Ubuntu VM to run Azure pipeline
pool:
  vmImage: 'ubuntu-16.04'

# Run NPM install to install depedencies on VM
steps:
  - task: Npm@1
    inputs:
      command: 'install'
      workingDir: 'f2'
  # Run automated npm tests
  - script: |
      cd f2
      npm run compile
      npm run test
      npm run lint
    displayName: 'Run npm scripts'
  # Build and push container to container registry. App Service is configured to serve latest build of container. containerRegistry value is the name of the DevOps Service Connection made to the ACR
  - task: Docker@2
    displayName: 'Master/DEV - Build Docker Image'
    condition: and(succeededOrFailed(), eq(variables['Build.SourceBranchName'], 'master'))
    inputs:
      containerRegistry: 'scACR-F2'
      repository: 'f2'
      Dockerfile: 'f2/Dockerfile'
      command: 'build'
      tags: |
        $(Build.SourceBranchName)
        $(Build.SourceBranchName)$(_DASH)$(Build.SourceVersion)
        latest
      arguments: --build-arg REACT_APP_DEV_ENVIRONMENT=yes --build-arg REACT_APP_VERSION=$(Build.SourceVersion) --build-arg REACT_APP_GOOGLE_ANALYTICS_ID=$(_NON_PROD_ANALYTICS_ID) --build-arg REACT_APP_GOOGLE_GTM_ID=$(REACT_APP_GOOGLE_GTM_ID) --build-arg REACT_APP_RECAPTCHA_KEY=$(REACT_APP_RECAPTCHA_KEY)

  - task: Docker@2
    displayName: 'Master/DEV - Push Docker Image to ACR'
    condition: and(succeededOrFailed(), eq(variables['Build.SourceBranchName'], 'master'))
    inputs:
      containerRegistry: 'scACR-F2'
      repository: 'f2'
      command: 'push'
      tags: |
        $(Build.SourceBranchName)
        $(Build.SourceBranchName)$(_DASH)$(Build.SourceVersion)
        latest

  - task: Docker@2
    displayName: 'Staging - Build Docker Image'
    condition: and(succeededOrFailed(), eq(variables['Build.SourceBranchName'], 'release-rcmp-staging'))
    inputs:
      containerRegistry: 'scCybercrimeStaging'
      repository: 'f2'
      Dockerfile: 'f2/Dockerfile'
      command: 'build'
      tags: |
        $(Build.SourceBranchName)
        $(Build.SourceBranchName)$(_DASH)$(Build.SourceVersion)
        latest
      arguments: --build-arg REACT_APP_DEV_ENVIRONMENT=yes --build-arg REACT_APP_VERSION=$(Build.SourceVersion) --build-arg REACT_APP_GOOGLE_ANALYTICS_ID=$(_NON_PROD_ANALYTICS_ID) --build-arg REACT_APP_GOOGLE_GTM_ID=$(REACT_APP_GOOGLE_GTM_ID) --build-arg REACT_APP_RECAPTCHA_KEY=$(REACT_APP_RECAPTCHA_KEY)

  - task: Docker@2
    displayName: 'Staging - Push Docker Image to ACR'
    condition: and(succeededOrFailed(), eq(variables['Build.SourceBranchName'], 'release-rcmp-staging'))
    inputs:
      containerRegistry: 'scCybercrimeStaging'
      repository: 'f2'
      command: 'push'
      tags: |
        $(Build.SourceBranchName)
        $(Build.SourceBranchName)$(_DASH)$(Build.SourceVersion)
        latest

  - task: Docker@2
    displayName: 'PROD - Build Docker Image'
    condition: and(succeededOrFailed(), eq(variables['Build.SourceBranchName'], 'release-rcmp-prod'))
    inputs:
      containerRegistry: 'scCybercrimeProd'
      repository: 'f2'
      Dockerfile: 'f2/Dockerfile'
      command: 'build'
      tags: |
        $(Build.SourceBranchName)
        $(Build.SourceBranchName)$(_DASH)$(Build.SourceVersion)
        latest
      arguments: --build-arg REACT_APP_DEV_ENVIRONMENT=$(_IS_A_DEV_ENVIRONMENT) --build-arg REACT_APP_VERSION=$(Build.SourceVersion) --build-arg REACT_APP_GOOGLE_ANALYTICS_ID=$(_REACT_APP_GOOGLE_ANALYTICS_ID) --build-arg REACT_APP_GOOGLE_GTM_ID=$(REACT_APP_GOOGLE_GTM_ID) --build-arg REACT_APP_RECAPTCHA_KEY=$(REACT_APP_RECAPTCHA_KEY)

  - task: Docker@2
    displayName: 'PROD - Push Docker Image to ACR'
    condition: and(succeededOrFailed(), eq(variables['Build.SourceBranchName'], 'release-rcmp-prod'))
    inputs:
      containerRegistry: 'scCybercrimeProd'
      repository: 'f2'
      command: 'push'
      tags: |
        $(Build.SourceBranchName)
        $(Build.SourceBranchName)$(_DASH)$(Build.SourceVersion)
        latest
